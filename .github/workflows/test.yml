name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Environment variables and secrets configuration
env:
  NODE_ENV: test
  CI: true

jobs:
  # Unit and integration tests
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Run type checking
      run: npm run test:types

    - name: Run linting
      run: npm run test:lint

    - name: Run formatting check
      run: npm run test:format

    # Unit tests with AI API keys (configured as GitHub secrets)
    - name: Run unit tests
      run: npm run test:ci
      env:
        CI: true
        NODE_ENV: test
        DATABASE_URL: file:./test.db
        # AI API keys for testing (configured as GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # End-to-end tests
  e2e:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Generate Prisma client
      run: npm run db:generate

    # Build application with AI API keys
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: file:./test.db
        # AI API keys for build process (configured as GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    # E2E tests with AI API keys
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true
        NODE_ENV: test
        DATABASE_URL: file:./test.db
        # AI API keys for E2E testing (configured as GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Accessibility tests
  accessibility:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npm run db:generate

    # Build application with AI API keys
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: file:./test.db
        # AI API keys for build process (configured as GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    # Start application with AI API keys
    - name: Start application
      run: npm start &
      env:
        NODE_ENV: production
        DATABASE_URL: file:./test.db
        # AI API keys for application runtime (configured as GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Wait for application to start
      run: npx wait-on http://localhost:3000

    - name: Run accessibility tests
      run: npm run test:accessibility:ci

  # Security tests and scans
  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm run test:security

    # Snyk security scan with token (configured as GitHub secret)
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        # Snyk token for security scanning (configured as GitHub secret)
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Performance tests
  performance:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npm run db:generate

    # Build application with AI API keys
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        DATABASE_URL: file:./test.db
        # AI API keys for build process (configured as GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    # Start application with AI API keys
    - name: Start application
      run: npm start &
      env:
        NODE_ENV: production
        DATABASE_URL: file:./test.db
        # AI API keys for application runtime (configured as GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Wait for application to start
      run: npx wait-on http://localhost:3000

    - name: Run Lighthouse performance tests
      run: npm run test:performance

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: lighthouse-report.json
        retention-days: 30

  # Deployment job (runs only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [test, e2e, accessibility, security, performance]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npm run db:generate

    # Build application with production secrets
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        # Production database URL (configured as GitHub secret)
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        # AI API keys for production build (configured as GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Deploy to production
      run: echo "Deploy to production server"
      # Aquí irían los comandos de despliegue reales
      # Por ejemplo: npm run deploy
