name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de testing
  test:
    name: Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: inclusive
          POSTGRES_PASSWORD: inclusive123
          POSTGRES_DB: inclusive_ai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup environment variables
      run: |
        echo "DATABASE_URL=postgresql://inclusive:inclusive123@localhost:5432/inclusive_ai_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV
        echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy

    - name: Run linting
      run: npm run test:lint

    - name: Run type checking
      run: npm run test:types

    - name: Run unit tests
      run: npm run test:ci

    - name: Run E2E tests
      run: |
        npm run test:e2e
      env:
        PLAYWRIGHT_HTML_REPORT: 1

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          playwright-report/
          coverage/

    - name: Run accessibility tests
      run: npm run test:accessibility:ci

    - name: Run security scan
      run: npm run test:security

  # Job de build
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job de deployment
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Deploy to production server using SSH
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        # Server configuration (configured as GitHub secrets)
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /opt/inclusive-ai-coach
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          docker system prune -f

    # Verify deployment health
    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ secrets.HOST }}/api/health || exit 1

    # Success notification
    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '‚úÖ Deployment successful! Inclusive AI Coach is now live.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    # Failure notification
    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå Deployment failed! Please check the logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job de monitoreo post-deployment
  monitor:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Performance testing with Lighthouse
    - name: Run performance tests
      run: |
        npm install -g lighthouse
        lighthouse ${{ secrets.HOST }} --output=json --output-path=./lighthouse-report.json
        
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report
        path: lighthouse-report.json

    # Verify application metrics
    - name: Check application metrics
      run: |
        # Verificar m√©tricas b√°sicas
        curl -s http://${{ secrets.HOST }}/api/metrics || echo "Metrics endpoint not available"
        
    # Monitoring results notification
    - name: Notify monitoring results
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üìä Post-deployment monitoring completed successfully.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
